<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Northcoders News Back-End</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" media="screen" href="main.css" />
    <script src="main.js"></script>
</head>
<body>
    <h1>Northcoders News Back-End</h1>   
    <p>A back-end server built to interface with a mongoDB database - providing useful api endpoints to perform CREATE, READ, UPDATE and DELETE operations on the four collections within. <br>
        <br>
        <br>
        <h2>List of endpoints available</h2>
        <p>
        
        <br> <a href="/api">GET /api</a>
        <br>Serves information about the following endpoints
        <br>
        <br>
        <br> <a href="/api/topics">GET /api/topics</a>
        <br>Get all the topics
        <br>
        <br> GET /api/topics/:topic_id/articles
        <br>Return all the articles for a certain topic
        <br>
        <br>POST /api/topics/:topic_id/articles
        <br> Add a new article to a topic. 
        <br>This route requires a JSON body with title and body key value pairs 
        <br>e.g: { "title": "this is my new article title" "body": "This is my new article content" }
        <br>
        <br> <a href="/api/articles">GET /api/articles</a>
        <br>Returns all the articles
        <br>
        <br>GET /api/articles/:article_id
        <br>Get an individual article
        <br>
        <br>GET /api/articles/:article_id/comments
        <br>Get all the comments for a individual article
        <br>
        <br>POST /api/articles/:article_id/comments
        <br>Add a new comment to an article. 
        <br> This route requires a JSON body with a comment key and value pair 
        <br>e.g: {"comment": "This is my new comment"}
        <br>
        <br>PATCH /api/articles/:article_id
        <br>Increment or Decrement the votes of an article by one. 
        <br>This route requires a vote query of 'up' or 'down' 
        <br>e.g: /api/articles/:article_id?vote=up
        <br>
        <br>PATCH /api/comments/:comment_id
        <br>Increment or Decrement the votes of a comment by one. 
        <br>This route requires a vote query of 'up' or 'down' 
        <br>e.g: /api/comments/:comment_id?vote=down
        <br>
        <br>DELETE /api/comments/:comment_id
        <br>Deletes a comment
        <br>
        <br>GET /api/users/:username
        <br>Returns profile data for the specified user.
        <br>
        </p>
        <h2>Built With</h2>
        <p>
        Express - Fast, unopinionated, minimalist web framework for node.
        <br>Mongoose - Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.
        <br>Body-parser - Node.js body parsing middleware.
        <br>
        </p>
        <h2>Downloading For External Use</h2>
        <p>
        The 4 production dependencies are listed above however there are also 4 recommended development dependencies that will help with the testing included and further development.
        <br>
        Chai - Chai is a BDD / TDD assertion library for node and the browser.
        <br>Mocha - Simple, flexible, fun JavaScript test framework for Node.js & The Browser.
        <br>Nodemon - Nodemon will watch the files in the directory in which nodemon was started, and if any files change,    <br>Nodemon will automatically restart your node application.
        <br>Supertest - HTTP assertions made easy via superagent.
        <br>
        
        Not included in this repository are the development/test/production files in the config folder that export (through an index file) a string that is a link to the mongo database.
                <br>
                <br>The seed file provided should create an appropriate local mongo database. This can be ran using 'node seed/run-seed.js
        <br>
        </p>
        <h2>Testing Code Additions</h2>
        <p>
        The provided tests (ran through the 'npm test' script) are set up to test all of the existing server endpoints and correct/incorrect usage of them by users. Any tests written for additional endpoints created should follow the same structure.
    </p>
    <br>

       <h2>Hosting</h2>
       <p>The app is hosted on heroku and can easily be re-hosted if this repo is cloned and modified. The 2 config variables that will need to be added are the 'NODE_ENV' (production) and the 'DB_URL' (the link to the hosted mongo database.)
            <br>
            Mongo databases can be hosted on mlab.
       </p> 
                
 <br>
    </p>
        
</body>
</html>